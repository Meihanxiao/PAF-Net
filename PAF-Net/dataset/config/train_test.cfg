[dataset]
# tensor type (float or double)
tensor_type = float

task_type = seg
root_dir  = ./dataset
# root_dir= 
train_csv = ./dataset/config/jsrt_train.csv
valid_csv = ./dataset/config/jsrt_valid.csv
test_csv  = ./dataset/config/jsrt_test.csv

train_batch_size =12
valid_batch_size=1
num_workder=1
test_batch_size=1

# modality number
modal_num = 1

# data transforms
NormalizeWithMeanStd=True
LabelConvert='rgb'
RandomCrop=False
LabelToProbability=False
# train_transform = [NormalizeWithMeanStd, LabelConvert, RandomCrop, LabelToProbability]
# valid_transform = [NormalizeWithMeanStd, LabelConvert, LabelToProbability]
# test_transform  = [NormalizeWithMeanStd]
train_transform = [NormalizeWithMeanStd, LabelConvert, LabelToProbability]
valid_transform = [NormalizeWithMeanStd, LabelConvert, LabelToProbability]
test_transform  = [NormalizeWithMeanStd]

RandomCrop_output_size=[256,256]
# NormalizeWithMeanStd_channels=None
NormalizeWithMeanStd_mean=[0.485, 0.456, 0.406]
NormalizeWithMeanStd_std=[0.229, 0.224, 0.225]
normalizewithmeanstd_mask=False
NormalizeWithMeanStd_channels = [0]
NormalizeWithMeanStd_random_fill=False
NormalizeWithMeanStd_inverse=False
LabelConvert_inverse=False
RandomCrop_foreground_focus=False
RandomCrop_foreground_ratio=False
RandomCrop_mask_label=[0]
RandomCrop_inverse=False
LabelToProbability_inverse=False

LabelConvert_source_list = [0, 255]
LabelConvert_target_list = [0, 1]

#RandomCrop_output_size = [256, 256]

LabelToProbability_class_num = 2

[network]
# this section gives parameters for network
# the keys may be different for different networks

# type of network
net_type =PAFNet

# number of class, required for segmentation task
class_num = 2

in_chns       = 3
feature_chns  = [8, 16, 32, 64, 128]
dropout       = [0,  0,  0, 0, 0]
bilinear      = True

[training]
# list of gpus
gpus = [0]

loss_type     = DiceLoss

# for optimizers
optimizer     = Adam
learning_rate =0.0028
weight_decay  = 0.000008
# learning_rate =1e-3
# weight_decay  = 1e-5
momentum      = 0.9


# for lr schedular (MultiStepLR)
lr_gamma      = 0.1
lr_milestones = [300]
# lr_milestones = [1000]

ckpt_save_dir    = model/unet_dice_loss
ckpt_save_prefix = unet

# start iter
iter_start = 0
iter_max   =4900
iter_valid = 98
iter_save  =98

[testing]
# list of gpus
gpus       = [0]

# checkpoint mode can be [0-latest, 1-best, 2-specified]
ckpt_mode         = 1
output_dir        = result

# convert the label of prediction output
label_source = [0, 1]
label_target = [0, 255]

evaluation_mode=True
test_time_dropout=True
